{"version":3,"sources":["helpers/api.ts","components/User.tsx","components/TodoCard.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["getPrepareTodos","a","Promise","all","fetch","then","response","json","todos","users","prepareTodos","map","todo","user","find","id","userId","User","className","name","TodoCard","title","completed","TodoList","key","App","useState","setTodos","initialTodos","setInitialTodos","isLoaded","setIsLoaded","isLoading","setIsLoading","href","onClick","sort","todoPrev","todoCurr","localeCompare","type","setTimeout","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"ySAaaA,EAAe,uCAAG,oCAAAC,EAAA,sEACAC,QAAQC,IAAI,CALlCC,MARa,8CASjBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UANtBH,MAJa,8CAKjBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YAQA,0CACtBC,EADsB,KACfC,EADe,KAEvBC,EAAeF,EAAMG,KAAI,SAACC,GAAD,mBAAC,eAC3BA,GAD0B,IAE7BC,KAAK,eAAMJ,EAAMK,MAAK,SAACD,GAAD,OAAiBA,EAAKE,KAAOH,EAAKI,gBAJ7B,kBAOtBN,GAPsB,2CAAH,qDCDbO,EANe,SAAC,GAAD,IAAGJ,EAAH,EAAGA,KAAH,OAC5B,wBAAIK,UAAU,SACXL,EAAKM,OCYKC,EAbmB,SAAC,GAAc,IAAZR,EAAW,EAAXA,KAC3BS,EAA2BT,EAA3BS,MAAOC,EAAoBV,EAApBU,UAAWT,EAASD,EAATC,KAE1B,OACE,oCACE,wBAAIK,UAAU,SAASG,GACvB,wBAAIH,UAAU,UAAWI,EAAa,MAAQ,MAC9C,kBAAC,EAAD,CAAMT,KAAMA,MCKHU,EAZmB,SAAC,GAAe,IAAbf,EAAY,EAAZA,MACnC,OACE,oCACGA,EAAMG,KAAI,SAAAC,GAAI,OACb,wBAAIY,IAAKZ,EAAKG,GAAIG,UAAU,QAC1B,kBAAC,EAAD,CAAUN,KAAMA,UC2DXa,EAjEO,WAAO,IAAD,EACAC,mBAAuB,IADvB,mBACnBlB,EADmB,KACZmB,EADY,OAEcD,mBAAuB,IAFrC,mBAEnBE,EAFmB,KAELC,EAFK,OAGMH,oBAAS,GAHf,mBAGnBI,EAHmB,KAGTC,EAHS,OAIQL,oBAAS,GAJjB,mBAInBM,EAJmB,KAIRC,EAJQ,KAwC1B,OACE,oCACE,qDACEH,EAKA,2BAAOZ,UAAU,OACf,+BACE,4BACE,4BAAI,uBAAGgB,KAAK,UAAUC,QA1BV,WACtBR,EAAS,YAAIC,GAAcQ,MAAK,SAACC,EAAUC,GAAX,OAC7BD,EAAShB,MAAOkB,cAAcD,EAASjB,aAwB5B,UACJ,4BAAI,uBAAGa,KAAK,cAAcC,QAtBd,WACtBR,EAAS,YAAIC,GAAcQ,MAAK,SAACC,EAAUC,GAAX,OAC5BD,EAASf,WAAegB,EAAShB,gBAoBvB,iBACJ,4BAAI,uBAAGY,KAAK,UAAUC,QAlBX,WACrBR,EAAS,YAAIC,GAAcQ,MAAK,SAACC,EAAUC,GAAX,OAC7BD,EAASxB,KAAKM,KAAMoB,cAAcD,EAASzB,KAAKM,YAgBrC,YAGR,+BACE,kBAAC,EAAD,CAAUX,MAAOA,MAbrB,4BAAQgC,KAAK,SAASL,QA1BN,WACpBF,GAAa,GACbQ,YAAW,WAbXV,GAAaD,GAEb9B,IACGK,MAAK,SAAAqC,GACJf,EAASe,GACTT,GAAa,GACbJ,EAAgBa,GAChBf,EAASe,QAQV,OAuBIV,EAAY,aAAe,UC/CtCW,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.aa97eb4f.chunk.js","sourcesContent":["const API_URL_USERS = 'https://jsonplaceholder.typicode.com/users';\nconst API_URL_TODOS = 'https://jsonplaceholder.typicode.com/todos';\n\nexport const getUsers = () => {\n  return fetch(API_URL_USERS)\n    .then(response => response.json());\n};\n\nexport const getTodos = () => {\n  return fetch(API_URL_TODOS)\n    .then(response => response.json());\n};\n\nexport const getPrepareTodos = async () => {\n  const [todos, users] = await Promise.all([getTodos(), getUsers()]);\n  const prepareTodos = todos.map((todo: Todos) => ({\n    ...todo,\n    user: { ...users.find((user: Users) => user.id === todo.userId) },\n  }));\n\n  return prepareTodos;\n};\n","import React from 'react';\n\ntype Props = {\n  user: Users;\n};\n\nconst User: React.FC<Props> = ({ user }) => (\n  <td className=\"users\">\n    {user.name}\n  </td>\n);\n\nexport default User;\n","import React from 'react';\nimport User from './User';\n\ntype Props = {\n  todo: ApdateTodo;\n};\n\nconst TodoCard: React.FC<Props> = ({ todo }) => {\n  const { title, completed, user } = todo;\n\n  return (\n    <>\n      <td className=\"title\">{title}</td>\n      <td className=\"status\">{(completed) ? 'yes' : 'no'}</td>\n      <User user={user} />\n    </>\n  );\n};\n\n\nexport default TodoCard;\n","import React from 'react';\nimport TodoCard from './TodoCard';\n\ntype Props = {\n  todos: ApdateTodo[];\n};\n\nconst TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      {todos.map(todo => (\n        <tr key={todo.id} className=\"todo\">\n          <TodoCard todo={todo} />\n        </tr>\n      ))}\n    </>\n  );\n};\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport { getPrepareTodos } from './helpers/api';\nimport TodoList from './components/TodoList';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<ApdateTodo[]>([]);\n  const [initialTodos, setInitialTodos] = useState<ApdateTodo[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loadTodos = () => {\n    setIsLoaded(!isLoaded);\n\n    getPrepareTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n        setIsLoading(true);\n        setInitialTodos(todosFromServer);\n        setTodos(todosFromServer);\n      });\n  };\n\n  const handleLoading = () => {\n    setIsLoading(true);\n    setTimeout(() => {\n      loadTodos();\n    }, 1000);\n  };\n\n  const sortByTodosName = () => {\n    setTodos([...initialTodos].sort((todoPrev, todoCurr) => (\n      (todoPrev.title).localeCompare(todoCurr.title))));\n  };\n\n  const sortByCompleted = () => {\n    setTodos([...initialTodos].sort((todoPrev, todoCurr) => (\n      (+todoPrev.completed) - (+todoCurr.completed))));\n  };\n\n  const sortByUserName = () => {\n    setTodos([...initialTodos].sort((todoPrev, todoCurr) => (\n      (todoPrev.user.name).localeCompare(todoCurr.user.name))));\n  };\n\n  return (\n    <>\n      <h1>Dynamic list of TODOs</h1>\n      {!isLoaded ? (\n        <button type=\"button\" onClick={handleLoading}>\n          {isLoading ? 'Loading...' : 'Load'}\n        </button>\n      ) : (\n        <table className=\"App\">\n          <thead>\n            <tr>\n              <th><a href=\"#/Todos\" onClick={sortByTodosName}>Todos</a></th>\n              <th><a href=\"#/Completed\" onClick={sortByCompleted}>Is completed</a></th>\n              <th><a href=\"#/Users\" onClick={sortByUserName}>Users</a></th>\n            </tr>\n          </thead>\n          <tbody>\n            <TodoList todos={todos} />\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}